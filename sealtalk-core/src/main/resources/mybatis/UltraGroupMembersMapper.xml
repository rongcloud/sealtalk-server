<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rcloud.server.sealtalk.dao.UltraGroupMembersMapper">
  <resultMap id="BaseResultMap" type="com.rcloud.server.sealtalk.entity.UltraGroupMembers">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="ultraGroupId" jdbcType="INTEGER" property="ultraGroupId" />
    <result column="memberId" jdbcType="INTEGER" property="memberId" />
    <result column="role" jdbcType="INTEGER" property="role" />
    <result column="groupNickname" jdbcType="VARCHAR" property="groupNickname"/>
    <result column="createdAt" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updatedAt" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>

  <resultMap id="resultMapWithGroups" type="com.rcloud.server.sealtalk.entity.UltraGroupMembers">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="ultraGroupId" jdbcType="INTEGER" property="ultraGroupId" />
    <result column="memberId" jdbcType="INTEGER" property="memberId" />
    <result column="role" jdbcType="INTEGER" property="role" />
    <result column="groupNickname" jdbcType="VARCHAR" property="groupNickname"/>
    <result column="createdAt" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updatedAt" jdbcType="TIMESTAMP" property="updatedAt" />
    <association property="groups" javaType="com.rcloud.server.sealtalk.entity.UltraGroup">
      <id column="g_id" jdbcType="INTEGER" property="id" />
      <result column="g_name" jdbcType="VARCHAR" property="name" />
      <result column="g_portraitUri" jdbcType="VARCHAR" property="portraitUri" />
      <result column="g_summary" jdbcType="VARCHAR" property="summary" />
      <result column="g_memberCount" jdbcType="INTEGER" property="memberCount" />
      <result column="g_creatorId" jdbcType="INTEGER" property="creatorId" />
      <result column="g_createdAt" jdbcType="TIMESTAMP" property="createdAt" />
      <result column="g_updatedAt" jdbcType="TIMESTAMP" property="updatedAt" />
    </association>
  </resultMap>

  <resultMap id="resultMapWithUsers" type="com.rcloud.server.sealtalk.entity.UltraGroupMembers">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="ultraGroupId" jdbcType="INTEGER" property="ultraGroupId" />
    <result column="memberId" jdbcType="INTEGER" property="memberId" />
    <result column="role" jdbcType="INTEGER" property="role" />
    <result column="groupNickname" jdbcType="VARCHAR" property="groupNickname"/>
    <result column="createdAt" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updatedAt" jdbcType="TIMESTAMP" property="updatedAt" />
    <association property="users" javaType="com.rcloud.server.sealtalk.entity.Users">
      <id column="user_id" jdbcType="INTEGER" property="id"/>
      <result column="user_nickname" jdbcType="VARCHAR" property="nickname"/>
      <result column="user_portraitUri" jdbcType="VARCHAR" property="portraitUri"/>
      <result column="user_gender" jdbcType="INTEGER" property="gender"/>
      <result column="user_stAccount" jdbcType="INTEGER" property="stAccount"/>
      <result column="user_phone" jdbcType="INTEGER" property="phone"/>
      <result column="user_region" jdbcType="INTEGER" property="region"/>
    </association>
  </resultMap>

  <select id="queryGroupMembersWithGroupByMemberId" resultMap="resultMapWithGroups" >
    SELECT ugm.*,
           ug.id g_id,
           ug.name g_name,
           ug.portraitUri g_portraitUri,
           ug.creatorId g_creatorId,
           ug.summary g_summary,
           ug.memberCount g_memberCount,
           ug.createdAt g_createdAt,
           ug.updatedAt g_updatedAt
    FROM ultra_group_members ugm join `ultra_group` ug
                               on ugm.ultraGroupId = ug.id
    where ugm.memberId=#{memberId}
    order by ug.createdAt desc limit 1000;
  </select>

  <select id="queryGroupMembersWithUsersByGroupId" resultMap="resultMapWithUsers">
    SELECT gm.*,
    u.id user_id,
    u.region user_region,
    u.nickname user_nickname,
    u.portraitUri user_portraitUri,
    u.gender user_gender,
    u.stAccount user_stAccount,
    u.phone user_phone

    FROM ultra_group_members gm join `users` u
    on gm.memberId = u.id
    where gm.ultraGroupId=#{groupId}
    order by gm.id
    limit #{limit} offset #{offset}

  </select>


  <select id="queryByMemberIds" resultMap="BaseResultMap">
    select memberId from ultra_group_members where ultraGroupId = #{groupId} and memberId in
    <foreach collection="memberIds" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>

  <!-- 1. 根据 ultraGroupId和 memberId查询单个的方法 -->
  <select id="selectByUltraGroupIdAndMemberId" resultMap="BaseResultMap">
    SELECT * FROM ultra_group_members WHERE ultraGroupId = #{ultraGroupId} AND memberId = #{memberId}
  </select>

  <!-- 2. 按照 ultraGroupId查询列表的方法 -->
  <select id="selectByUltraGroupId" resultMap="BaseResultMap">
    SELECT * FROM ultra_group_members WHERE ultraGroupId = #{ultraGroupId}
  </select>

  <!-- 3. 增加按照memberId查询列表的方法 -->
  <select id="selectByMemberId" resultMap="BaseResultMap">
    SELECT * FROM ultra_group_members WHERE memberId = #{memberId}
  </select>

  <!-- 4. 增加按照 ultraGroupId删除的方法 -->
  <delete id="deleteByUltraGroupId">
    DELETE FROM ultra_group_members WHERE ultraGroupId = #{ultraGroupId}
  </delete>

  <!-- 5. 增加按照memberId删除的方法 -->
  <delete id="deleteByMemberId">
    DELETE FROM ultra_group_members WHERE memberId = #{memberId}
  </delete>

  <!-- 6. 增加按照ultraGroupId 和memberId列表删除的方法 -->
  <delete id="deleteByUltraGroupIdAndMemberIds">
    DELETE FROM ultra_group_members WHERE ultraGroupId = #{ultraGroupId} AND memberId IN
    <foreach collection="memberIds" item="memberId" open="(" separator="," close=")">
      #{memberId}
    </foreach>
  </delete>

  <insert id="insertIgnoreBatch">
    INSERT IGNORE INTO ultra_group_members (ultraGroupId, memberId, role, groupNickname, createdAt, updatedAt)
    VALUES
    <foreach collection="list" item="item" separator=",">
      (#{item.ultraGroupId}, #{item.memberId}, #{item.role}, #{item.groupNickname}, now(), now())
    </foreach>
  </insert>

  <select id="countByMemberIds" resultType="java.util.Map">
    SELECT memberId, count(id) as count FROM ultra_group_members WHERE memberId IN
    <foreach collection="memberIds" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
    GROUP BY memberId
  </select>
</mapper>